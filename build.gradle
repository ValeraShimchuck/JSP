import io.franzbecker.gradle.lombok.task.DelombokTask
plugins {
    id 'java'
    id 'maven-publish'
    id 'io.franzbecker.gradle-lombok' version '5.0.0'
}

sourceCompatibility = JavaVersion.VERSION_18
targetCompatibility = JavaVersion.VERSION_18

group 'com.github.ValeraShimchuck'
version '1.0'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    gradlePluginPortal()
}

java {
    withSourcesJar()
    withJavadocJar()
}




dependencies {
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.1.3'
    implementation 'com.google.code.gson:gson:2.9.0'
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
}

task delombok(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
    doFirst {
        outputDir.deleteDir()
    }
}

sourcesJar {
    dependsOn delombok
    from delombok.outputDir
    into archiveClassifier.set("sources")
}


javadoc {
    dependsOn delombok
    source = delombok.outputDir
    failOnError = false
}

lombok {
    sha256 = ""
}

tasks.withType(Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    def list = new ArrayList()
    eachFile {
        project.logger.lifecycle(getSourcePath())
        if (!list.contains(getSourcePath())) {
            list.add(getSourcePath())
            exclude()
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            project.configurations
            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.implementation.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
        }
    }
}

